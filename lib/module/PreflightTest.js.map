{"version":3,"sources":["PreflightTest.ts"],"names":["EventEmitter","common","Constants","InvalidStateError","constructTwilioError","PreflightTest","constructor","uuid","nativePreflightTestEvent","PreflightTestEventKeyUuid","_uuid","preflightTestEventKeyType","PreflightTestEventTypeValueCompleted","_handleCompletedEvent","PreflightTestEventTypeValueConnected","_handleConnectedEvent","PreflightTestEventTypeValueFailed","_handleFailedEvent","PreflightTestEventTypeValueQualityWarning","_handleQualityWarningEvent","PreflightTestEventTypeValueSample","_handleSampleEvent","_exhaustiveCheck","PreflightTestEventKeyType","nativeEvent","report","PreflightTestCompletedEventKeyReport","constructInvalidValueError","Event","Completed","parsedReport","parseReport","emit","Connected","message","code","PreflightTestFailedEventKeyError","Failed","error","currentWarnings","PreflightTestQualityWarningEventKeyCurrentWarnings","Array","isArray","QualityWarning","forEach","w","previousWarnings","PreflightTestQualityWarningEventKeyPreviousWarnings","sampleStr","PreflightTestSampleEventKeySample","Sample","sampleObj","JSON","parse","parseSample","NativeEventEmitter","addListener","ScopePreflightTest","_handleNativeEvent","Platform","OS","setTimeout","NativeModule","preflightTest_flushEvents","_invokeAndCatchNativeMethod","method","catch","ErrorCodeInvalidStateError","getCallSid","preflightTest_getCallSid","getEndTime","preflightTest_getEndTime","then","Number","getLatestSample","preflightTest_getLatestSample","getReport","preflightTest_getReport","getStartTime","preflightTest_getStartTime","getState","preflightTest_getState","parseState","stop","preflightTest_stop","parseTimeMeasurement","nativeTimeMeasurement","duration","end","endTime","start","startTime","parseCallQuality","nativeCallQuality","parseCallQualityAndroid","parseCallQualityIos","parsedCallQuality","callQualityMap","android","get","ios","nativeState","parsedState","preflightTestStateMap","expectedKeys","keys","join","sampleObject","audioInputLevel","audioOutputLevel","bytesReceived","bytesSent","codec","jitter","mos","packetsLost","packetsLostFraction","packetsReceived","packetsSent","rtt","timestamp","sample","parseIsTurnRequired","isTurnRequired","parseIsTurnRequiredAndroid","parseIsTurnRequiredIos","parsedValue","isTurnRequiredMap","parseWarnings","warnings","parseWarningsCleared","warningsCleared","rawReport","unprocessedReport","callSid","callQuality","edge","iceCandidateStats","iceCandidates","stats","networkStats","unprocessedNetworkTiming","networkTiming","signaling","peerConnection","ice","iceConnection","testTiming","preflightTest","samples","statsSamples","map","selectedEdge","selectedIceCandidatePairStats","selectedIceCandidatePair","eventName","valueName","expectedType","actualType","Listener","State","CallQuality","PreflightCallQualityExcellent","PreflightCallQualityGreat","PreflightCallQualityGood","PreflightCallQualityFair","PreflightCallQualityDegraded","Map","Excellent","Great","Good","Fair","Degraded","PreflightTestStateCompleted","PreflightTestStateConnected","PreflightTestStateConnecting","Connecting","PreflightTestStateFailed"],"mappings":"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","sourcesContent":["/**\n * Copyright © 2025 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport type { Call } from './Call';\nimport * as common from './common';\nimport { Constants } from './constants';\nimport { InvalidStateError, TwilioError } from './error';\nimport { constructTwilioError } from './error/utility';\nimport type { AudioCodec } from './type/AudioCodec';\nimport type { IceServer, IceTransportPolicy } from './type/Ice';\nimport type * as PreflightTestType from './type/PreflightTest';\n\nexport interface PreflightTest {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(connectedEvent: PreflightTest.Event.Connected): boolean;\n\n  /** @internal */\n  emit(\n    completedEvent: PreflightTest.Event.Completed,\n    report: PreflightTest.Report\n  ): boolean;\n\n  /** @internal */\n  emit(failedEvent: PreflightTest.Event.Failed, error: TwilioError): boolean;\n\n  /** @internal */\n  emit(\n    sampleEvent: PreflightTest.Event.Sample,\n    sample: PreflightTest.RTCSample\n  ): boolean;\n\n  /** @internal */\n  emit(\n    qualityWarningEvent: PreflightTest.Event.QualityWarning,\n    currentWarnings: Call.QualityWarning[],\n    previousWarnings: Call.QualityWarning[]\n  ): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Connected event. Raised when the PreflightTest has successfully connected.\n   *\n   * @example\n   * ```typescript\n   * preflightTest.addListener(PreflightTest.Event.Connected, () => {\n   *   // preflightTest has been connected\n   * });\n   * ```\n   *\n   * @param connectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The PreflightTest object.\n   */\n  addListener(\n    connectedEvent: PreflightTest.Event.Connected,\n    listener: PreflightTest.Listener.Connected\n  ): this;\n  /** {@inheritDoc (PreflightTest:interface).(addListener:1)} */\n  on(\n    connectedEvent: PreflightTest.Event.Connected,\n    listener: PreflightTest.Listener.Connected\n  ): this;\n\n  /**\n   * Completed event. Raised when the PreflightTest has successfully completed.\n   *\n   * @example\n   * ```typescript\n   * preflightTest.addListener(PreflightTest.Event.Completed, (report: PreflightTest.Report) => {\n   *   // preflightTest has been completed\n   *   // consider using the report and adjusting your UI to show any potential issues\n   * });\n   * ```\n   *\n   * @param completedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The PreflightTest object.\n   */\n  addListener(\n    completedEvent: PreflightTest.Event.Completed,\n    listener: PreflightTest.Listener.Completed\n  ): this;\n  /** {@inheritDoc (PreflightTest:interface).(addListener:2)} */\n  on(\n    completedEvent: PreflightTest.Event.Completed,\n    listener: PreflightTest.Listener.Completed\n  ): this;\n\n  /**\n   * Failed event. Raised when the PreflightTest was unable to be performed.\n   *\n   * @example\n   * ```typescript\n   * preflightTest.addListener(PreflightTest.Event.Failed, (error: TwilioError) => {\n   *   // preflightTest has failed\n   *   // consider adjusting your UI to show the error\n   * });\n   * ```\n   *\n   * @param failedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The PreflightTest object.\n   */\n  addListener(\n    failedEvent: PreflightTest.Event.Failed,\n    listener: PreflightTest.Listener.Failed\n  ): this;\n  /** {@inheritDoc (PreflightTest:interface).(addListener:3)} */\n  on(\n    failedEvent: PreflightTest.Event.Failed,\n    listener: PreflightTest.Listener.Failed\n  ): this;\n\n  /**\n   * Sample event. Raised when the PreflightTest has generated a stats sample\n   * during the test.\n   *\n   * @example\n   * ```typescript\n   * preflightTest.addListener(PreflightTest.Event.Sample, (sample: PreflightTest.Sample) => {\n   *   // preflightTest has generated a sample\n   *   // consider updating your UI with information from the sample\n   * });\n   * ```\n   *\n   * @param sampleEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The PreflightTest object.\n   */\n  addListener(\n    sampleEvent: PreflightTest.Event.Sample,\n    listener: PreflightTest.Listener.Sample\n  ): this;\n  /** {@inheritDoc (PreflightTest:interface).(addListener:4)} */\n  on(\n    sampleEvent: PreflightTest.Event.Sample,\n    listener: PreflightTest.Listener.Sample\n  ): this;\n\n  /**\n   * QualityWarning event. Raised when the PreflightTest has encountered a\n   * QualityWarning during a test.\n   *\n   * @example\n   * ```typescript\n   * preflightTest.addListener(\n   *   PreflightTest.Event.QualityWarning,\n   *   (currentWarnings: Call.QualityWarning[], previousWarnings: Call.QualityWarning[]) => {\n   *     // preflightTest has generated or cleared a quality warning\n   *     // consider updating your UI with information about the warning\n   *   },\n   * );\n   * ```\n   *\n   * @param qualityWarningEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The PreflightTest object.\n   */\n  addListener(\n    warningEvent: PreflightTest.Event.QualityWarning,\n    listener: PreflightTest.Listener.QualityWarning\n  ): this;\n  /** {@inheritDoc (PreflightTest:interface).(addListener:5)} */\n  on(\n    warningEvent: PreflightTest.Event.QualityWarning,\n    listener: PreflightTest.Listener.QualityWarning\n  ): this;\n\n  /**\n   * Generic event listener typings.\n   * @param preflightTestEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The PreflightTest object.\n   */\n  addListener(\n    event: PreflightTest.Event,\n    listener: PreflightTest.Listener.Generic\n  ): this;\n  /** {@inheritDoc (PreflightTest:interface).(addListener:6)} */\n  on(\n    event: PreflightTest.Event,\n    listener: PreflightTest.Listener.Generic\n  ): this;\n}\n\n/**\n * The PreflightTest for Voice React Native SDK allows you to anticipate and\n * troubleshoot end users' connectivity and bandwidth issues before or during\n * Twilio Voice calls.\n *\n * You can run a PreflightTest before a Twilio Voice call. The PreflightTest\n * performs a test call to Twilio and provides a\n * {@link (PreflightTest:namespace).Report} object at the end. The report\n * includes information about the end user's network connection (including\n * jitter, packet loss, and round trip time) and connection settings.\n *\n * @example\n * ```typescript\n * const accessToken = ...;\n * const preflightTest = voice.runPreflightTest(accessToken);\n *\n * preflightTest.on(PreflightTest.Event.Connected, () => {\n *   // handle when preflightTest connects\n * });\n *\n * preflightTest.on(PreflightTest.Event.Completed, (report: PreflightTest.Report) => {\n *   // handle when preflightTest is complete\n * });\n *\n * preflightTest.on(PreflightTest.Event.Failed, (error: TwilioError) => {\n *   // handle preflightTest errors\n * });\n *\n * preflightTest.on(\n *   PreflightTest.Event.QualityWarning,\n *   (currentWarnings: Call.QualityWarning[], previousWarnings: Call.QualityWarning[]) => {\n *     // handle preflightTest quality warnings\n *   },\n * );\n *\n * preflightTest.on(PreflightTest.Event.Sample, (sample: PreflightTest.Sample) => {\n *   // handle preflightTest sample\n * });\n * ```\n */\nexport class PreflightTest extends EventEmitter {\n  /**\n   * UUID of the PreflightTest. This is generated by the native layer and used\n   * to link events emitted by the native layer to the respective JS object.\n   */\n  private _uuid: string;\n\n  /**\n   * PreflightTest constructor.\n   *\n   * @internal\n   */\n  constructor(uuid: string) {\n    super();\n\n    this._uuid = uuid;\n\n    common.NativeEventEmitter.addListener(\n      Constants.ScopePreflightTest,\n      this._handleNativeEvent\n    );\n\n    // by using a setTimeout here, we let the call stack empty before we flush\n    // the preflight test events. this way, listeners on this object can bind\n    // before flushing\n    if (common.Platform.OS === 'ios') {\n      common.setTimeout(() => {\n        common.NativeModule.preflightTest_flushEvents();\n      });\n    }\n  }\n\n  /**\n   * Handle all PreflightTest native events.\n   */\n  private _handleNativeEvent = (\n    nativePreflightTestEvent: PreflightTestType.NativeEvent\n  ): void => {\n    const uuid = nativePreflightTestEvent[Constants.PreflightTestEventKeyUuid];\n    if (typeof uuid !== 'string') {\n      throw new InvalidStateError(\n        `Unexpected PreflightTest UUID type: \"${uuid}\".`\n      );\n    }\n\n    if (uuid !== this._uuid) {\n      return;\n    }\n\n    // VBLOCKS-5083\n    // Update this member access when we upgrade typescript for this project.\n    switch (nativePreflightTestEvent.preflightTestEventKeyType) {\n      case Constants.PreflightTestEventTypeValueCompleted: {\n        return this._handleCompletedEvent(nativePreflightTestEvent);\n      }\n      case Constants.PreflightTestEventTypeValueConnected: {\n        return this._handleConnectedEvent();\n      }\n      case Constants.PreflightTestEventTypeValueFailed: {\n        return this._handleFailedEvent(nativePreflightTestEvent);\n      }\n      case Constants.PreflightTestEventTypeValueQualityWarning: {\n        return this._handleQualityWarningEvent(nativePreflightTestEvent);\n      }\n      case Constants.PreflightTestEventTypeValueSample: {\n        return this._handleSampleEvent(nativePreflightTestEvent);\n      }\n      default: {\n        const _exhaustiveCheck: never = nativePreflightTestEvent;\n        throw new InvalidStateError(\n          `Unexpected native PreflightTest event key type: \"${\n            (_exhaustiveCheck as any)[Constants.PreflightTestEventKeyType]\n          }\".`\n        );\n      }\n    }\n  };\n\n  /**\n   * Handle completed event.\n   */\n  private _handleCompletedEvent = (\n    nativeEvent: PreflightTestType.NativeEventCompleted\n  ) => {\n    const report = nativeEvent[Constants.PreflightTestCompletedEventKeyReport];\n    if (typeof report !== 'string') {\n      throw constructInvalidValueError(\n        PreflightTest.Event.Completed,\n        'report',\n        'string',\n        typeof report\n      );\n    }\n\n    const parsedReport = parseReport(report);\n\n    this.emit(PreflightTest.Event.Completed, parsedReport);\n  };\n\n  /**\n   * Handle connected event.\n   */\n  private _handleConnectedEvent = () => {\n    this.emit(PreflightTest.Event.Connected);\n  };\n\n  /**\n   * Handle failed event.\n   */\n  private _handleFailedEvent = (\n    nativeEvent: PreflightTestType.NativeEventFailed\n  ) => {\n    const { message, code } =\n      nativeEvent[Constants.PreflightTestFailedEventKeyError];\n    if (typeof message !== 'string') {\n      throw constructInvalidValueError(\n        PreflightTest.Event.Failed,\n        'message',\n        'string',\n        typeof message\n      );\n    }\n    if (typeof code !== 'number') {\n      throw constructInvalidValueError(\n        PreflightTest.Event.Failed,\n        'code',\n        'number',\n        typeof code\n      );\n    }\n    const error = constructTwilioError(message, code);\n\n    this.emit(PreflightTest.Event.Failed, error);\n  };\n\n  /**\n   * Handle quality warning event.\n   */\n  private _handleQualityWarningEvent = (\n    nativeEvent: PreflightTestType.NativeEventQualityWarning\n  ) => {\n    const currentWarnings =\n      nativeEvent[Constants.PreflightTestQualityWarningEventKeyCurrentWarnings];\n    if (!Array.isArray(currentWarnings)) {\n      throw constructInvalidValueError(\n        PreflightTest.Event.QualityWarning,\n        'currentWarnings',\n        'array',\n        typeof currentWarnings\n      );\n    }\n    currentWarnings.forEach((w) => {\n      if (typeof w !== 'string') {\n        throw constructInvalidValueError(\n          PreflightTest.Event.QualityWarning,\n          'element-in-currentWarnings',\n          'string',\n          typeof w\n        );\n      }\n    });\n\n    const previousWarnings =\n      nativeEvent[\n        Constants.PreflightTestQualityWarningEventKeyPreviousWarnings\n      ];\n    if (!Array.isArray(previousWarnings)) {\n      throw constructInvalidValueError(\n        PreflightTest.Event.QualityWarning,\n        'previousWarnings',\n        'array',\n        typeof previousWarnings\n      );\n    }\n    previousWarnings.forEach((w) => {\n      if (typeof w !== 'string') {\n        throw constructInvalidValueError(\n          PreflightTest.Event.QualityWarning,\n          'element-in-previousWarnings',\n          'string',\n          typeof w\n        );\n      }\n    });\n\n    this.emit(\n      PreflightTest.Event.QualityWarning,\n      currentWarnings as Call.QualityWarning[],\n      previousWarnings as Call.QualityWarning[]\n    );\n  };\n\n  /**\n   * Handle sample event.\n   */\n  private _handleSampleEvent = (\n    nativeEvent: PreflightTestType.NativeEventSample\n  ) => {\n    const sampleStr = nativeEvent[Constants.PreflightTestSampleEventKeySample];\n    if (typeof sampleStr !== 'string') {\n      throw constructInvalidValueError(\n        PreflightTest.Event.Sample,\n        'sample',\n        'string',\n        typeof sampleStr\n      );\n    }\n\n    const sampleObj = JSON.parse(sampleStr);\n\n    this.emit(PreflightTest.Event.Sample, parseSample(sampleObj));\n  };\n\n  /**\n   * Internal helper method to invoke a native method and handle the returned\n   * promise from the native method.\n   */\n  private async _invokeAndCatchNativeMethod<T>(\n    method: (uuid: string) => Promise<T>\n  ) {\n    return method(this._uuid).catch((error: any): never => {\n      if (typeof error.code === 'number' && error.message)\n        throw constructTwilioError(error.message, error.code);\n\n      if (error.code === Constants.ErrorCodeInvalidStateError)\n        throw new InvalidStateError(error.message);\n\n      throw error;\n    });\n  }\n\n  /**\n   * Get the CallSid of the underlying Call in the PreflightTest.\n   *\n   * @returns\n   * Promise that\n   * - Resolves with a string representing the CallSid.\n   * - Rejects if the native layer could not find the CallSid for this\n   *   PreflightTest object.\n   */\n  public async getCallSid(): Promise<string> {\n    return this._invokeAndCatchNativeMethod(\n      common.NativeModule.preflightTest_getCallSid\n    );\n  }\n\n  /**\n   * Get the end time of the PreflightTest.\n   *\n   * @returns\n   * A Promise that\n   * - Resolves with `number` if the PreflightTest has ended.\n   * - Resolves with `undefined` if PreflightTest has not ended.\n   * - Rejects if the native layer encountered an error.\n   */\n  public async getEndTime(): Promise<number> {\n    return this._invokeAndCatchNativeMethod(\n      common.NativeModule.preflightTest_getEndTime\n    ).then(Number);\n  }\n\n  /**\n   * Get the latest stats sample generated by the PreflightTest.\n   *\n   * @returns\n   * A Promise that\n   * - Resolves with the last {@link (PreflightTest:namespace).RTCSample}\n   *   generated by the PreflightTest.\n   * - Resolves with `undefined` if there is no previously generated sample.\n   * - Rejects if the native layer encountered an error.\n   */\n  public async getLatestSample(): Promise<PreflightTest.RTCSample> {\n    return this._invokeAndCatchNativeMethod(\n      common.NativeModule.preflightTest_getLatestSample\n    ).then((sampleStr) => {\n      const sampleObj = JSON.parse(sampleStr);\n      return parseSample(sampleObj);\n    });\n  }\n\n  /**\n   * Get the final report generated by the PreflightTest.\n   *\n   * @returns\n   * A Promise that\n   * - Resolves with the final {@link (PreflightTest:namespace).Report}.\n   * - Resolves with `undefined` if the report is unavailable.\n   * - Rejects if the native layer encountered an error.\n   */\n  public async getReport(): Promise<PreflightTest.Report> {\n    return this._invokeAndCatchNativeMethod(\n      common.NativeModule.preflightTest_getReport\n    ).then(parseReport);\n  }\n\n  /**\n   * Get the start time of the PreflightTest.\n   *\n   * @returns\n   * A Promise that\n   * - Resolves with a `number` representing the start time of the\n   *   PreflightTest.\n   * - Rejects if the native layer encountered an error.\n   */\n  public async getStartTime(): Promise<number> {\n    return this._invokeAndCatchNativeMethod(\n      common.NativeModule.preflightTest_getStartTime\n    ).then(Number);\n  }\n\n  /**\n   * Get the state of the PreflightTest.\n   *\n   * @returns\n   * A Promise that\n   * - Resolves with the current state of the PreflightTest.\n   * - Rejects if the native layer encountered an error.\n   */\n  public async getState(): Promise<PreflightTest.State> {\n    return this._invokeAndCatchNativeMethod(\n      common.NativeModule.preflightTest_getState\n    ).then(parseState);\n  }\n\n  /**\n   * Stop the ongoing PreflightTest.\n   *\n   * @returns\n   * A Promise that\n   * - Resolves if the PreflightTest was successfully stopped.\n   * - Rejects if the native layer encountered an error.\n   */\n  public async stop(): Promise<void> {\n    return this._invokeAndCatchNativeMethod(\n      common.NativeModule.preflightTest_stop\n    );\n  }\n}\n\n/**\n * Preflight helper functions to parse JSON strings from the native layer into\n * proper JS objects to emit from this class.\n */\n\n/**\n * Parse native time measurement.\n */\nfunction parseTimeMeasurement(nativeTimeMeasurement: {\n  duration: number;\n  endTime: number;\n  startTime: number;\n}): PreflightTest.TimeMeasurement {\n  return {\n    duration: nativeTimeMeasurement.duration,\n    end: nativeTimeMeasurement.endTime,\n    start: nativeTimeMeasurement.startTime,\n  };\n}\n\n/**\n * Parse native call quality enum.\n */\nfunction parseCallQuality(\n  nativeCallQuality: any\n): PreflightTest.CallQuality | null {\n  switch (common.Platform.OS) {\n    case 'android': {\n      return parseCallQualityAndroid(nativeCallQuality);\n    }\n    case 'ios': {\n      return parseCallQualityIos(nativeCallQuality);\n    }\n    default: {\n      throw new InvalidStateError('Invalid platform.');\n    }\n  }\n}\n\n/**\n * Parse call quality value for Android platform.\n */\nfunction parseCallQualityAndroid(\n  nativeCallQuality: string | undefined | null\n): PreflightTest.CallQuality | null {\n  if (typeof nativeCallQuality === 'undefined' || nativeCallQuality === null) {\n    return null;\n  }\n\n  if (typeof nativeCallQuality !== 'string') {\n    throw new InvalidStateError(\n      `Call quality not of type \"string\". Found \"${typeof nativeCallQuality}\".`\n    );\n  }\n\n  const parsedCallQuality = callQualityMap.android.get(nativeCallQuality);\n\n  if (typeof parsedCallQuality !== 'string') {\n    throw new InvalidStateError(\n      `Call quality invalid. Expected a string, found \"${nativeCallQuality}\".`\n    );\n  }\n\n  return parsedCallQuality;\n}\n\n/**\n * Parse call quality for iOS platform.\n */\nfunction parseCallQualityIos(\n  nativeCallQuality: number | undefined | null\n): PreflightTest.CallQuality | null {\n  if (typeof nativeCallQuality === 'undefined' || nativeCallQuality === null) {\n    return null;\n  }\n\n  if (typeof nativeCallQuality !== 'number') {\n    throw new InvalidStateError(\n      `Call quality not of type \"number\". Found \"${typeof nativeCallQuality}\".`\n    );\n  }\n\n  const parsedCallQuality = callQualityMap.ios.get(nativeCallQuality);\n\n  if (typeof parsedCallQuality !== 'string') {\n    throw new InvalidStateError(\n      `Call quality invalid. Expected [0, 4], found \"${nativeCallQuality}\".`\n    );\n  }\n\n  return parsedCallQuality;\n}\n\n/**\n * Parse native preflight test state value.\n */\nfunction parseState(nativeState: string): PreflightTest.State {\n  const parsedState = preflightTestStateMap.get(nativeState);\n\n  if (typeof parsedState !== 'string') {\n    const expectedKeys = Array(preflightTestStateMap.keys()).join(', ');\n    throw new InvalidStateError(\n      'PreflightTest state invalid. ' +\n        `Expected one of \"[${expectedKeys}]\". Got \"${nativeState}\".`\n    );\n  }\n\n  return parsedState;\n}\n\n/**\n * Parse a sample object and transform the keys to match the expected output.\n */\nfunction parseSample(\n  sampleObject: Omit<\n    PreflightTest.RTCSample,\n    typeof Constants.PreflightRTCSampleTimestamp\n  > & { [Constants.PreflightRTCSampleTimestamp]: string }\n): PreflightTest.RTCSample {\n  const audioInputLevel = sampleObject.audioInputLevel;\n  const audioOutputLevel = sampleObject.audioOutputLevel;\n  const bytesReceived = sampleObject.bytesReceived;\n  const bytesSent = sampleObject.bytesSent;\n  const codec = sampleObject.codec;\n  const jitter = sampleObject.jitter;\n  const mos = sampleObject.mos;\n  const packetsLost = sampleObject.packetsLost;\n  const packetsLostFraction = sampleObject.packetsLostFraction;\n  const packetsReceived = sampleObject.packetsReceived;\n  const packetsSent = sampleObject.packetsSent;\n  const rtt = sampleObject.rtt;\n  const timestamp = Number(sampleObject.timestamp);\n\n  const sample = {\n    audioInputLevel,\n    audioOutputLevel,\n    bytesReceived,\n    bytesSent,\n    codec,\n    jitter,\n    mos,\n    packetsLost,\n    packetsLostFraction,\n    packetsReceived,\n    packetsSent,\n    rtt,\n    timestamp,\n  };\n\n  return sample;\n}\n\n/**\n * Parse native \"isTurnRequired\" value.\n */\nfunction parseIsTurnRequired(isTurnRequired: any): boolean | null {\n  switch (common.Platform.OS) {\n    case 'android': {\n      return parseIsTurnRequiredAndroid(isTurnRequired);\n    }\n    case 'ios': {\n      return parseIsTurnRequiredIos(isTurnRequired);\n    }\n    default: {\n      throw new InvalidStateError('Invalid platform.');\n    }\n  }\n}\n\n/**\n * Parse native \"isTurnRequired\" value on Android.\n */\nfunction parseIsTurnRequiredAndroid(\n  isTurnRequired: boolean | undefined | null\n): boolean | null {\n  if (typeof isTurnRequired === 'undefined' || isTurnRequired === null) {\n    return null;\n  }\n\n  if (typeof isTurnRequired !== 'boolean') {\n    throw new InvalidStateError(\n      `PreflightTest \"isTurnRequired\" not valid. Found \"${isTurnRequired}\".`\n    );\n  }\n\n  return isTurnRequired;\n}\n\n/**\n * Parse native \"isTurnRequired\" value on iOS.\n */\nfunction parseIsTurnRequiredIos(\n  isTurnRequired: string | undefined | null\n): boolean | null {\n  if (typeof isTurnRequired === 'undefined' || isTurnRequired === null) {\n    return null;\n  }\n\n  if (typeof isTurnRequired !== 'string') {\n    throw new InvalidStateError(\n      'PreflightTest \"isTurnRequired\" not of type \"string\". ' +\n        `Found \"${isTurnRequired}\".`\n    );\n  }\n\n  const parsedValue = isTurnRequiredMap.ios.get(isTurnRequired);\n\n  if (typeof parsedValue !== 'boolean') {\n    throw new InvalidStateError(\n      `PreflightTest \"isTurnRequired\" not valid. Found \"${isTurnRequired}\".`\n    );\n  }\n\n  return parsedValue;\n}\n\n/**\n * Parse native warnings array.\n */\nfunction parseWarnings(\n  warnings: PreflightTest.Warning[] | undefined | null\n): PreflightTest.Warning[] {\n  if (typeof warnings === 'undefined' || warnings === null) {\n    return [];\n  }\n\n  if (!Array.isArray(warnings)) {\n    throw new InvalidStateError(\n      `PreflightTest \"warnings\" invalid. Found \"${warnings}\".`\n    );\n  }\n\n  return warnings;\n}\n\n/**\n * Parse native warningsCleared array.\n */\nfunction parseWarningsCleared(\n  warningsCleared: PreflightTest.WarningCleared[] | undefined | null\n): PreflightTest.WarningCleared[] {\n  if (typeof warningsCleared === 'undefined' || warningsCleared === null) {\n    return [];\n  }\n\n  if (!Array.isArray(warningsCleared)) {\n    throw new InvalidStateError(\n      `PreflightTest \"warningsCleared\" invalid. Found \"${warningsCleared}\".`\n    );\n  }\n\n  return warningsCleared;\n}\n\n/**\n * Parse native preflight report.\n */\nfunction parseReport(rawReport: string): PreflightTest.Report {\n  const unprocessedReport: any = JSON.parse(rawReport);\n\n  const callSid: string = unprocessedReport.callSid;\n\n  // Note: Android returns enum values where the first letter is capitalized.\n  // The helper function normalizes this into all-lowercased values.\n  const callQuality: PreflightTest.CallQuality | null = parseCallQuality(\n    unprocessedReport.callQuality\n  );\n\n  const edge: string = unprocessedReport.edge;\n\n  // Note: key change from `iceCandidates` to `iceCandidateStats`\n  const iceCandidateStats: PreflightTest.RTCIceCandidateStats[] =\n    unprocessedReport.iceCandidates;\n\n  // Note: iOS returns a string, Android returns a boolean\n  const isTurnRequired: boolean | null = parseIsTurnRequired(\n    unprocessedReport.isTurnRequired\n  );\n\n  // Note: key change from `networkStats` to `stats`.\n  const stats: PreflightTest.RTCStats = unprocessedReport.networkStats;\n\n  // Note: removing preflightTest from networkTiming and putting it in a\n  // separate testTiming member\n  const unprocessedNetworkTiming: {\n    signaling: any;\n    peerConnection: any;\n    iceConnection: any;\n    preflightTest: any;\n  } = unprocessedReport.networkTiming;\n\n  // Note: nested key change from `startTime` to `start` and `endTime` to `end`.\n  const networkTiming: PreflightTest.NetworkTiming = {\n    signaling: parseTimeMeasurement(unprocessedNetworkTiming.signaling),\n    peerConnection: parseTimeMeasurement(\n      unprocessedNetworkTiming.peerConnection\n    ),\n    ice: parseTimeMeasurement(unprocessedNetworkTiming.iceConnection),\n  };\n\n  // Note: nested key change from `startTime` to `start` and `endTime` to `end`.\n  const testTiming: PreflightTest.TimeMeasurement = parseTimeMeasurement(\n    unprocessedNetworkTiming.preflightTest\n  );\n\n  // Note: key change from `statsSamples` to `stats`.\n  const samples: PreflightTest.RTCSample[] =\n    unprocessedReport.statsSamples.map(parseSample);\n\n  const selectedEdge: string = unprocessedReport.selectedEdge;\n\n  // Note: key change from `selectedIceCandidatePair` to `selectedIceCandidatePairStats`.\n  const selectedIceCandidatePairStats: PreflightTest.RTCSelectedIceCandidatePairStats =\n    unprocessedReport.selectedIceCandidatePair;\n\n  // Note: iOS returns undefined where Android returns an empty array\n  // when there were no warnings\n  const warnings: PreflightTest.Warning[] = parseWarnings(\n    unprocessedReport.warnings\n  );\n\n  // Note: iOS returns undefined where Android returns an empty array\n  // when there were no warningsCleared\n  const warningsCleared: PreflightTest.WarningCleared[] = parseWarningsCleared(\n    unprocessedReport.warningsCleared\n  );\n\n  const report: PreflightTest.Report = {\n    callSid,\n    callQuality,\n    edge,\n    iceCandidateStats,\n    isTurnRequired,\n    stats,\n    networkTiming,\n    testTiming,\n    samples,\n    selectedEdge,\n    selectedIceCandidatePairStats,\n    warnings,\n    warningsCleared,\n  };\n\n  return report;\n}\n\n/**\n * Helper function to construct errors when the native layer sends an\n * unexpected value to the JS layer.\n */\nfunction constructInvalidValueError(\n  eventName: PreflightTest.Event,\n  valueName: string,\n  expectedType: string,\n  actualType: string\n): InvalidStateError {\n  return new InvalidStateError(\n    `Invalid \"preflightTest#${eventName}\" value type for \"${valueName}\". ` +\n      `Expected \"${expectedType}\"; actual \"${actualType}\".`\n  );\n}\n\n/**\n * Helper types for the PrefligthTest class.\n */\nexport namespace PreflightTest {\n  /**\n   * Options to run a PreflightTest.\n   */\n  export interface Options {\n    /**\n     * Array of ICE servers to use for the PreflightTest.\n     */\n    [Constants.CallOptionsKeyIceServers]?: IceServer[];\n    /**\n     * The ICE transport policy to use for the PreflightTest.\n     */\n    [Constants.CallOptionsKeyIceTransportPolicy]?: IceTransportPolicy;\n    /**\n     * The preferred audio codec to use for the PreflightTest.\n     */\n    [Constants.CallOptionsKeyPreferredAudioCodecs]?: AudioCodec[];\n  }\n\n  /**\n   * Events raised by the PreflightTest.\n   */\n  export enum Event {\n    /** {@inheritdoc (PreflightTest:interface).(addListener:1)} */\n    Connected = 'connected',\n\n    /** {@inheritdoc (PreflightTest:interface).(addListener:2)} */\n    Completed = 'completed',\n\n    /** {@inheritdoc (PreflightTest:interface).(addListener:3)} */\n    Failed = 'failed',\n\n    /** {@inheritdoc (PreflightTest:interface).(addListener:4)} */\n    Sample = 'sample',\n\n    /** {@inheritdoc (PreflightTest:interface).(addListener:5)} */\n    QualityWarning = 'qualityWarning',\n  }\n\n  /**\n   * Types of the listener methods that are bound to the PreflightTest events.\n   */\n  export namespace Listener {\n    /** {@inheritdoc (PreflightTest:interface).(addListener:1)} */\n    export type Connected = () => void;\n\n    /** {@inheritdoc (PreflightTest:interface).(addListener:2)} */\n    export type Completed = (report: Report) => void;\n\n    /** {@inheritdoc (PreflightTest:interface).(addListener:3)} */\n    export type Failed = (error: TwilioError) => void;\n\n    /** {@inheritdoc (PreflightTest:interface).(addListener:4)} */\n    export type Sample = (sample: RTCSample) => void;\n\n    /** {@inheritdoc (PreflightTest:interface).(addListener:5)} */\n    export type QualityWarning = (\n      currentWarnings: Call.QualityWarning[],\n      previousWarnings: Call.QualityWarning[]\n    ) => void;\n\n    /** {@inheritdoc (PreflightTest:interface).(addListener:6)} */\n    export type Generic = (...args: any[]) => void;\n  }\n\n  /**\n   * States of the PreflightTest object.\n   */\n  export enum State {\n    /**\n     * The state of the PreflightTest after the connected event has been raised.\n     *\n     * See {@link (PreflightTest:interface).(addListener:1)}.\n     */\n    Connected = 'connected',\n\n    /**\n     * The state of the PreflightTest after the completed event has been raised.\n     *\n     * See {@link (PreflightTest:interface).(addListener:2)}.\n     */\n    Completed = 'completed',\n\n    /**\n     * The state of the PreflightTest after the PreflightTest has been started\n     * but not yet connected.\n     */\n    Connecting = 'connecting',\n\n    /**\n     * The state of the PreflightTest after the failed event has been raised.\n     *\n     * See {@link (PreflightTest:interface).(addListener:3)}.\n     */\n    Failed = 'failed',\n  }\n\n  /**\n   * Represents general stats for a specific metric.\n   */\n  export interface Stats {\n    /**\n     * The average value for this metric.\n     */\n    [Constants.PreflightStatsAverage]: number;\n\n    /**\n     * The maximum value for this metric.\n     */\n    [Constants.PreflightStatsMax]: number;\n\n    /**\n     * The minimum value for this metric.\n     */\n    [Constants.PreflightStatsMin]: number;\n  }\n\n  /**\n   * Represents RTC related stats that are extracted from RTC samples.\n   */\n  export interface RTCStats {\n    /**\n     * Packets delay variation.\n     */\n    [Constants.PreflightRTCStatsJitter]: Stats;\n\n    /**\n     * Mean opinion score, 1.0 through roughly 4.5.\n     */\n    [Constants.PreflightRTCStatsMos]: Stats;\n\n    /**\n     * Round trip time, to the server back to the client.\n     */\n    [Constants.PreflightRTCStatsRtt]: Stats;\n  }\n\n  /**\n   * Timing measurements that provide operational milestones.\n   */\n  export interface TimeMeasurement {\n    /**\n     * Number of milliseconds elapsed for this measurements.\n     */\n    [Constants.PreflightTimeMeasurementDuration]: number;\n\n    /**\n     * A millisecond timestamp that represents the end of a PreflightTest.\n     */\n    [Constants.PreflightTimeMeasurementEnd]: number;\n\n    /**\n     * A millisecond timestamp that represents the start of a PreflightTest.\n     */\n    [Constants.PreflightTimeMeasurementStart]: number;\n  }\n\n  /**\n   * Represents network related time measurements.\n   */\n  export interface NetworkTiming {\n    /**\n     * Measurements for establishing ICE connection.\n     */\n    [Constants.PreflightNetworkTimingIce]: TimeMeasurement;\n\n    /**\n     * Measurements for establishing a PeerConnection.\n     */\n    [Constants.PreflightNetworkTimingPeerConnection]: TimeMeasurement;\n\n    /**\n     * Measurements for establishing a signaling connection.\n     */\n    [Constants.PreflightNetworkTimingSignaling]: TimeMeasurement;\n  }\n\n  /**\n   * A warning that can be raised by the `PreflightTest` and returned in the\n   * `PreflightTest.Report.warnings` field.\n   */\n  export interface Warning {\n    /**\n     * Name of the warning.\n     */\n    [Constants.PreflightWarningName]: string;\n\n    /**\n     * Threshold value that, when exceeded, will trigger this warning.\n     */\n    [Constants.PreflightWarningThreshold]: string;\n\n    /**\n     * Detected values that exceeded the threshold value and triggered this\n     * warning.\n     */\n    [Constants.PreflightWarningValues]: string;\n\n    /**\n     * Timestamp of the warning.\n     */\n    [Constants.PreflightWarningTimestamp]: number;\n  }\n\n  /**\n   * Signifies when a `PreflightTest.Warning` has been cleared. Emitted by the\n   * `PreflightTest` when the warning was cleared and also included in the\n   * `PreflightTest.Report.warningsCleared` field.\n   */\n  export interface WarningCleared {\n    /**\n     * The name of the cleared warning.\n     */\n    [Constants.PreflightWarningClearedName]: string;\n\n    /**\n     * The timestamp when the warning was cleared.\n     */\n    [Constants.PreflightWarningClearedTimestamp]: number;\n  }\n\n  /**\n   * Provides information related to the ICE candidate.\n   */\n  export interface RTCIceCandidateStats {\n    /**\n     * The type of the ICE candidate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsCandidateType]: string;\n\n    /**\n     * Whether or not the candidate was deleted.\n     */\n    [Constants.PreflightRTCIceCandidateStatsDeleted]: boolean;\n\n    /**\n     * The IP address of the ICE candidate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsIp]: string;\n\n    /**\n     * Whether or not the ICE candidate is remote. True if remote, false if\n     * local.\n     */\n    [Constants.PreflightRTCIceCandidateStatsIsRemote]: boolean;\n\n    /**\n     * Represents the network cost of the ICE candidate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsNetworkCost]: number;\n\n    /**\n     * The network ID of the ICE candidate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsNetworkId]: number;\n\n    /**\n     * The network type of the ICE candidate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsNetworkType]: string;\n\n    /**\n     * The port of the ICE candidate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsPort]: number;\n\n    /**\n     * The priority of the ICE candidate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsPriority]: number;\n\n    /**\n     * The protocol that the ICE candidate is using to communicate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsProtocol]: string;\n\n    /**\n     * The related address of the ICE candidate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsRelatedAddress]: string;\n\n    /**\n     * The related port of the ICE candidate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsRelatedPort]: number;\n\n    /**\n     * The TCP type of the ICE candidate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsTcpType]: string;\n\n    /**\n     * The transport ID of the ICE candidate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsTransportId]: string;\n\n    /**\n     * The URL of the ICE candidate.\n     */\n    [Constants.PreflightRTCIceCandidateStatsUrl]: string;\n  }\n\n  /**\n   * The `PreflightTest.RTCIceCandidateStats` of the selected remote and local\n   * ICE candidates.\n   */\n  export interface RTCSelectedIceCandidatePairStats {\n    /**\n     * The stats of the local candidate.\n     */\n    [Constants.PreflightRTCSelectedIceCandidatePairStatsLocalCandidate]: RTCIceCandidateStats;\n\n    /**\n     * The stats of the remote candidate.\n     */\n    [Constants.PreflightRTCSelectedIceCandidatePairStatsRemoteCandidate]: RTCIceCandidateStats;\n  }\n\n  /**\n   * A sample generated during the progress of a `PreflightTest`.\n   */\n  export interface RTCSample {\n    /**\n     * The audio input level at the time when the sample was taken.\n     */\n    [Constants.PreflightRTCSampleAudioInputLevel]: number;\n\n    /**\n     * The audio output level at the time when the sample was taken.\n     */\n    [Constants.PreflightRTCSampleAudioOutputLevel]: number;\n\n    /**\n     * The bytes sent at the time when the sample was taken.\n     */\n    [Constants.PreflightRTCSampleBytesReceived]: number;\n\n    /**\n     * The bytes received at the time when the sample was taken.\n     */\n    [Constants.PreflightRTCSampleBytesSent]: number;\n\n    /**\n     * The codec used by the underlying media connection.\n     */\n    [Constants.PreflightRTCSampleCodec]: string;\n\n    /**\n     * The jitter present in the underlying media connection at the time when\n     * the sample was taken.\n     */\n    [Constants.PreflightRTCSampleJitter]: number;\n\n    /**\n     * The evaluated MOS score of the underlying media connection at the time\n     * when the sample was taken.\n     */\n    [Constants.PreflightRTCSampleMos]: number;\n\n    /**\n     * The number of packets lost during the `PreflightTest`.\n     */\n    [Constants.PreflightRTCSamplePacketsLost]: number;\n\n    /**\n     * The fraction of total packets lost during the `PreflightTest`.\n     */\n    [Constants.PreflightRTCSamplePacketsLostFraction]: number;\n\n    /**\n     * The number of packets received during the `PreflightTest`.\n     */\n    [Constants.PreflightRTCSamplePacketsReceived]: number;\n\n    /**\n     * The number of packets sent during the `PreflightTest`.\n     */\n    [Constants.PreflightRTCSamplePacketsSent]: number;\n\n    /**\n     * The round-trip time of a network packet at the time when the sample was\n     * taken.\n     */\n    [Constants.PreflightRTCSampleRtt]: number;\n\n    /**\n     * The timestamp of when the RTC sample was taken during the\n     * `PreflightTest`.\n     */\n    [Constants.PreflightRTCSampleTimestamp]: number;\n  }\n\n  /**\n   * The call quality.\n   */\n  export enum CallQuality {\n    /**\n     * Indicates `4.2 < average MOS`.\n     */\n    Excellent = Constants.PreflightCallQualityExcellent,\n\n    /**\n     * Indicates `4.1 <= average MOS <= 4.2`.\n     */\n    Great = Constants.PreflightCallQualityGreat,\n\n    /**\n     * Indicates `3.7 <= average MOS < 4.1`.\n     */\n    Good = Constants.PreflightCallQualityGood,\n\n    /**\n     * Indicates `3.1 <= average MOS < 3.7`.\n     */\n    Fair = Constants.PreflightCallQualityFair,\n\n    /**\n     * Indicates `average MOS < 3.1`.\n     */\n    Degraded = Constants.PreflightCallQualityDegraded,\n  }\n\n  /**\n   * The final report generated by the `PreflightTest` upon completion. Contains\n   * info related to the call quality and RTC statistics generated during the\n   * `PreflightTest`.\n   */\n  export interface Report {\n    /**\n     * The `CallSid` of the underlying Twilio call used by the `PreflightTest`.\n     */\n    [Constants.PreflightReportCallSid]: string;\n\n    /**\n     * The rated average MOS score of the `PreflightTest`. This value can help\n     * indicate the expected quality of future calls.\n     */\n    [Constants.PreflightReportCallQuality]: CallQuality | null;\n\n    /**\n     * The Twilio Edge used by the `Call` in the `PreflightTest`.\n     */\n    [Constants.PreflightReportEdge]: string;\n\n    /**\n     * An array of ICE candidates gathered when connecting to media.\n     */\n    [Constants.PreflightReportIceCandidateStats]: RTCIceCandidateStats[];\n\n    /**\n     * Whether TURN is required to connect to media.\n     *\n     * This is dependent on the selected ICE candidates, and will be `true` if\n     * either is of type \"relay\", `false` if both are of another type, or\n     * `null` if there are no selected ICE candidates.\n     *\n     * See `PreflightTest.Options.iceServers` for more details.\n     */\n    [Constants.PreflightReportIsTurnRequired]: boolean | null;\n\n    /**\n     * The RTC related stats captured during the `PreflightTest`.\n     */\n    [Constants.PreflightReportStats]: RTCStats;\n\n    /**\n     * Network related time measurements.\n     */\n    [Constants.PreflightReportNetworkTiming]: NetworkTiming;\n\n    /**\n     * Time measurements of the `PreflightTest` in its entirety.\n     */\n    [Constants.PreflightReportTestTiming]: TimeMeasurement;\n\n    /**\n     * RTC samples collected during the `PreflightTest`.\n     */\n    [Constants.PreflightReportSamples]: RTCSample[];\n\n    /**\n     * The Twilio Edge value passed when constructing the `PreflightTest`.\n     */\n    [Constants.PreflightReportSelectedEdge]: string;\n\n    /**\n     * RTC stats for the ICE candidate pair used to connect to media, if ICE\n     * candidates were selected.\n     */\n    [Constants.PreflightReportSelectedIceCandidatePairStats]: RTCSelectedIceCandidatePairStats;\n\n    /**\n     * Array of warnings detected during the `PreflightTest`.\n     */\n    [Constants.PreflightReportWarnings]: Warning[];\n\n    /**\n     * Array of warnings cleared during the `PreflightTest.`\n     */\n    [Constants.PreflightReportWarningsCleared]: WarningCleared[];\n  }\n}\n\n/**\n * Map of call quality values from the native layer to the expected JS values.\n */\nconst callQualityMap = {\n  ios: new Map<number, PreflightTest.CallQuality>([\n    [0, PreflightTest.CallQuality.Excellent],\n    [1, PreflightTest.CallQuality.Great],\n    [2, PreflightTest.CallQuality.Good],\n    [3, PreflightTest.CallQuality.Fair],\n    [4, PreflightTest.CallQuality.Degraded],\n  ]),\n  android: new Map<string, PreflightTest.CallQuality>([\n    ['Excellent', PreflightTest.CallQuality.Excellent],\n    ['Great', PreflightTest.CallQuality.Great],\n    ['Good', PreflightTest.CallQuality.Good],\n    ['Fair', PreflightTest.CallQuality.Fair],\n    ['Degraded', PreflightTest.CallQuality.Degraded],\n  ]),\n};\n\n/**\n * Map of isTurnRequired values from the native layer to the expected JS values.\n */\nconst isTurnRequiredMap = {\n  ios: new Map<string, boolean>([\n    ['true', true],\n    ['false', false],\n  ]),\n};\n\n/**\n * Map of state values from the native layers/common constants to the expected\n * JS values.\n */\nconst preflightTestStateMap = new Map<string, PreflightTest.State>([\n  [Constants.PreflightTestStateCompleted, PreflightTest.State.Completed],\n  [Constants.PreflightTestStateConnected, PreflightTest.State.Connected],\n  [Constants.PreflightTestStateConnecting, PreflightTest.State.Connecting],\n  [Constants.PreflightTestStateFailed, PreflightTest.State.Failed],\n]);\n"]}