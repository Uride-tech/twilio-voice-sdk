{"version":3,"sources":["Call.tsx"],"names":["EventEmitter","NativeModule","NativeEventEmitter","Constants","InvalidArgumentError","constructTwilioError","validateCallMessage","IncomingCallMessage","OutgoingCallMessage","Call","constructor","uuid","customParameters","from","sid","state","to","isMuted","isOnHold","initialConnectedTimestamp","nativeCallEvent","type","call","callInfo","handler","_nativeEventHandler","Error","_uuid","CallEventConnected","_update","emit","Event","Connected","CallEventConnectFailure","message","code","error","ConnectFailure","CallEventDisconnected","Disconnected","CallEventReconnecting","Reconnecting","CallEventReconnected","Reconnected","CallEventRinging","Ringing","CallEventQualityWarningsChanged","currentWarnings","CallEventCurrentWarnings","previousWarnings","CallEventPreviousWarnings","QualityWarningsChanged","CallEventMessageReceived","callMessage","callMessageInfo","incomingCallMessage","MessageReceived","_customParameters","_from","_sid","_state","State","Connecting","_to","_isMuted","_isOnHold","_initialConnectedTimestamp","Date","undefined","_handleConnectedEvent","_handleConnectFailureEvent","_handleDisconnectedEvent","_handleReconnectedEvent","_handleReconnectingEvent","_handleRingingEvent","_handleQualityWarningsChangedEvent","_handleMessageReceivedEvent","addListener","ScopeCall","_handleNativeEvent","newState","eventTypeStateMap","disconnect","call_disconnect","getCustomParameters","getFrom","getInitialConnectedTimestamp","getSid","getState","getStats","call_getStats","getTo","hold","call_hold","mute","call_mute","sendDigits","digits","call_sendDigits","sendMessage","content","contentType","messageType","voiceEventSid","call_sendMessage","outgoingCallMessage","postFeedback","score","issue","validScores","includes","Object","values","Issue","nativeScore","scoreMap","nativeIssue","issueMap","call_postFeedback","CallStateConnected","CallStateConnecting","CallStateDisconnected","CallStateReconnecting","CallStateRinging","QualityWarning","Score","Listener","NotReported","One","Two","Three","Four","Five","CallFeedbackScoreNotReported","CallFeedbackScoreOne","CallFeedbackScoreTwo","CallFeedbackScoreThree","CallFeedbackScoreFour","CallFeedbackScoreFive","AudioLatency","CallFeedbackIssueAudioLatency","ChoppyAudio","CallFeedbackIssueChoppyAudio","DroppedCall","CallFeedbackIssueDroppedCall","Echo","CallFeedbackIssueEcho","NoisyCall","CallFeedbackIssueNoisyCall","CallFeedbackIssueNotReported","OneWayAudio","CallFeedbackIssueOneWayAudio"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,YAAT,QAA6B,eAA7B;AAEA,SAASC,YAAT,EAAuBC,kBAAvB,QAAiD,UAAjD;AACA,SAASC,SAAT,QAA0B,aAA1B;AAUA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACA,SAAsBC,mBAAtB,QAAiD,2BAAjD;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,SAASC,mBAAT,QAAoC,mCAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAqSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAN,SAAmBT,YAAnB,CAAgC;AACrC;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAME;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEU,EAAAA,WAAW,CAAC;AACVC,IAAAA,IADU;AAEVC,IAAAA,gBAFU;AAGVC,IAAAA,IAHU;AAIVC,IAAAA,GAJU;AAKVC,IAAAA,KALU;AAMVC,IAAAA,EANU;AAOVC,IAAAA,OAPU;AAQVC,IAAAA,QARU;AASVC,IAAAA;AATU,GAAD,EAUQ;AACjB;;AADiB;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,gDAkDWC,eAAD,IAAsC;AACjE,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,IAAI,EAAEC;AAAd,UAA2BH,eAAjC;AAEA,YAAMI,OAAO,GAAG,KAAKC,mBAAL,CAAyBJ,IAAzB,CAAhB;;AACA,UAAI,OAAOG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","sourcesContent":["/**\n * Copyright © 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport type { RTCStats } from './';\nimport { NativeModule, NativeEventEmitter } from './common';\nimport { Constants } from './constants';\nimport type {\n  NativeCallEvent,\n  NativeCallEventType,\n  NativeCallInfo,\n  NativeCallFeedbackIssue,\n  NativeCallFeedbackScore,\n} from './type/Call';\nimport type { CustomParameters, Uuid } from './type/common';\nimport type { TwilioError } from './error/TwilioError';\nimport { InvalidArgumentError } from './error/InvalidArgumentError';\nimport { constructTwilioError } from './error/utility';\nimport { CallMessage, validateCallMessage } from './CallMessage/CallMessage';\nimport { IncomingCallMessage } from './CallMessage/IncomingCallMessage';\nimport { OutgoingCallMessage } from './CallMessage/OutgoingCallMessage';\n\n/**\n * Defines strict typings for all events emitted by {@link (Call:class)\n * | Call objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (Call:class) | Call class}.\n * - See also the {@link (Call:namespace) | Call namespace}.\n *\n * @public\n */\nexport declare interface Call {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(connectedEvent: Call.Event.Connected): boolean;\n\n  /** @internal */\n  emit(\n    connectFailureEvent: Call.Event.ConnectFailure,\n    error: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(reconnectingEvent: Call.Event.Reconnecting, error: TwilioError): boolean;\n\n  /** @internal */\n  emit(reconnectedEvent: Call.Event.Reconnected): boolean;\n\n  /** @internal */\n  emit(\n    disconnectedEvent: Call.Event.Disconnected,\n    error?: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(ringingEvent: Call.Event.Ringing): boolean;\n\n  /** @internal */\n  emit(\n    qualityWarningsChangedEvent: Call.Event.QualityWarningsChanged,\n    currentQualityWarnings: Call.QualityWarning[],\n    previousQualityWarnings: Call.QualityWarning[]\n  ): boolean;\n\n  /** @internal */\n  emit(\n    messageReceivedEvent: Call.Event.MessageReceived,\n    incomingCallMessage: IncomingCallMessage\n  ): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Connected event. Raised when the call has successfully connected.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Connected, () => {\n   *   // call has been connected\n   * });\n   * ```\n   *\n   * @param connectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    connectedEvent: Call.Event.Connected,\n    listener: Call.Listener.Connected\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:1)}\n   */\n  on(\n    connectedEvent: Call.Event.Connected,\n    listener: Call.Listener.Connected\n  ): this;\n\n  /**\n   * Connect failure event. Raised when the call has failed to connect.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.ConnectFailure, (error) => {\n   *   // call was unable to connect, handle error\n   * });\n   * ```\n   *\n   * @param connectFailureEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    connectFailureEvent: Call.Event.ConnectFailure,\n    listener: Call.Listener.ConnectFailure\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:2)}\n   */\n  on(\n    connectFailureEvent: Call.Event.ConnectFailure,\n    listener: Call.Listener.ConnectFailure\n  ): this;\n\n  /**\n   * Reconnecting event. Raised when the call is reconnecting.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Reconnecting, (error) => {\n   *   // call is attempting to reconnect, handle error\n   * });\n   * ```\n   *\n   * @param reconnectingEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    reconnectingEvent: Call.Event.Reconnecting,\n    listener: Call.Listener.Reconnecting\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:3)}\n   */\n  on(\n    reconnectingEvent: Call.Event.Reconnecting,\n    listener: Call.Listener.Reconnecting\n  ): this;\n\n  /**\n   * Reconnected event. Raised when the call has recovered and reconnected.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Reconnected, () => {\n   *   // call has reconnected\n   * });\n   * ```\n   *\n   * @param reconnectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    reconnectedEvent: Call.Event.Reconnected,\n    listener: Call.Listener.Reconnected\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:4)}\n   */\n  on(\n    reconnectedEvent: Call.Event.Reconnected,\n    listener: Call.Listener.Reconnected\n  ): this;\n\n  /**\n   * Disconnected event. Raised when the call has disconnected.\n   *\n   * @remarks\n   * This event can occur in \"naturally\" disconnected calls and calls\n   * disconnected from issues such as network problems. If the SDK has detected\n   * an issue that has caused the call to disconnect, then the error parameter\n   * will be defined, otherwise it will be undefined.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Disconnected, (error) => {\n   *   // call has disconnected\n   *   // if a natural disconnect occurred, then error is `undefined`\n   *   // if an unnatural disconnect occurred, then error is defined\n   * });\n   * ```\n   *\n   * @param disconnectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    disconnectedEvent: Call.Event.Disconnected,\n    listener: Call.Listener.Disconnected\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:5)}\n   */\n  on(\n    disconnectedEvent: Call.Event.Disconnected,\n    listener: Call.Listener.Disconnected\n  ): this;\n\n  /**\n   * Ringing event. Raised when the call has begun to ring.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Ringing, () => {\n   *   // call is ringing\n   * });\n   * ```\n   *\n   * @param ringingEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    ringingEvent: Call.Event.Ringing,\n    listener: Call.Listener.Ringing\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:6)}\n   */\n  on(ringingEvent: Call.Event.Ringing, listener: Call.Listener.Ringing): this;\n\n  /**\n   * Quality warnings changed event. Raised when a call quality warning is set\n   * or unset. All \"ongoing\" call quality warnings are passed to the invoked\n   * listener function.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(\n   *   Call.Event.QualityWarningsChanged,\n   *   (\n   *      currentWarnings: Call.QualityWarning[],\n   *      previousWarnings: Call.QualityWarning[]\n   *   ) => {\n   *     // call quality warnings have changed\n   *   }\n   * );\n   * ```\n   *\n   * @param qualityWarningsChangedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    qualityWarningsChangedEvent: Call.Event.QualityWarningsChanged,\n    listener: Call.Listener.QualityWarningsChanged\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:7)}\n   */\n  on(\n    qualityWarningsChangedEvent: Call.Event.QualityWarningsChanged,\n    listener: Call.Listener.QualityWarningsChanged\n  ): this;\n\n  /**\n   * MessageReceived event. Raised when a {@link IncomingCallMessage} is\n   * received.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.MessageReceived, (message) => {\n   *    // callMessage received\n   * })\n   * ```\n   *\n   * @param messageReceivedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object\n   */\n  addListener(\n    messageReceivedEvent: Call.Event.MessageReceived,\n    listener: Call.Listener.MessageReceived\n  ): this;\n  /** {@inheritDoc (Call:interface).(addListener:8)} */\n  on(\n    callMessageEvent: Call.Event.MessageReceived,\n    listener: Call.Listener.MessageReceived\n  ): this;\n\n  /**\n   * Generic event listener typings.\n   * @param callEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(callEvent: Call.Event, listener: Call.Listener.Generic): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:9)}\n   */\n  on(callEvent: Call.Event, listener: Call.Listener.Generic): this;\n}\n\n/**\n * Provides access to information about a call, including the call parameters,\n * and exposes functionality for a call such as disconnecting, muting, and\n * holding.\n *\n * @remarks\n * Note that the call information is fetched as soon as possible from the native\n * layer, but there is no guarantee that all information is immediately\n * available. Methods such as `Call.getFrom()` or `Call.getTo()` may return\n * `undefined`.\n *\n * As call events are received from the native layer, call information will\n * propagate from the native layer to the JS layer and become available.\n * Therefore, it is good practice to read information from the call after an\n * event occurs, or as events occur.\n *\n *  - See the {@link (Call:namespace).Event} enum for events emitted by `Call`\n *    objects.\n *  - See the {@link (Call:interface) | Call interface} for overloaded event\n *    listening methods.\n *  - See the {@link (Call:namespace) | Call namespace} for types and\n *    enumerations used by this class.\n *\n * @public\n */\nexport class Call extends EventEmitter {\n  /**\n   * The `Uuid` of this call. Used to identify calls between the JS and native\n   * layer so we can associate events and native functionality between the\n   * layers.\n   */\n  private _uuid: Uuid;\n  /**\n   * Call custom parameters.\n   */\n  private _customParameters: CustomParameters;\n  /**\n   * Call `from` parameter.\n   */\n  private _from?: string;\n  /**\n   * Initial `connected` timestamp. Milliseconds since epoch.\n   */\n  private _initialConnectedTimestamp?: Date;\n  /**\n   * A boolean representing if the call is currently muted.\n   */\n  private _isMuted?: boolean;\n  /**\n   * A boolean representing if the call is currently on hold.\n   */\n  private _isOnHold?: boolean;\n  /**\n   * A string representing the SID of this call.\n   */\n  private _sid?: string;\n  /**\n   * The current state of the call.\n   *\n   * @remarks\n   * See {@link (Call:namespace).State}.\n   */\n  private _state: Call.State;\n  /**\n   * Call `to` parameter.\n   */\n  private _to?: string;\n\n  /**\n   * Handlers for native call events. Set upon construction so we can\n   * dynamically bind events to handlers.\n   *\n   * @privateRemarks\n   * This is done by the constructor so this mapping isn't made every time the\n   * {@link (Call:class)._handleNativeEvent} function is invoked.\n   */\n  private _nativeEventHandler: Record<\n    NativeCallEventType,\n    (callEvent: NativeCallEvent) => void\n  >;\n\n  /**\n   * Constructor for the {@link (Call:class) | Call class}. This should not be\n   * invoked by third-party code. All instances of the\n   * {@link (Call:class) | Call class} should be made by the SDK and emitted by\n   * {@link (Voice:class) | Voice objects}.\n   *\n   * @param nativeCallInfo - An object containing all of the data from the\n   * native layer necessary to fully describe a call, as well as invoke native\n   * functionality for the call.\n   *\n   * @internal\n   */\n  constructor({\n    uuid,\n    customParameters,\n    from,\n    sid,\n    state,\n    to,\n    isMuted,\n    isOnHold,\n    initialConnectedTimestamp,\n  }: NativeCallInfo) {\n    super();\n\n    this._uuid = uuid;\n    this._customParameters = { ...customParameters };\n    this._from = from;\n    this._sid = sid;\n    this._state = typeof state === 'string' ? state : Call.State.Connecting;\n    this._to = to;\n    this._isMuted = isMuted;\n    this._isOnHold = isOnHold;\n    this._initialConnectedTimestamp = initialConnectedTimestamp\n      ? new Date(initialConnectedTimestamp)\n      : undefined;\n\n    this._nativeEventHandler = {\n      /**\n       * Call State\n       */\n      [Constants.CallEventConnected]: this._handleConnectedEvent,\n      [Constants.CallEventConnectFailure]: this._handleConnectFailureEvent,\n      [Constants.CallEventDisconnected]: this._handleDisconnectedEvent,\n      [Constants.CallEventReconnected]: this._handleReconnectedEvent,\n      [Constants.CallEventReconnecting]: this._handleReconnectingEvent,\n      [Constants.CallEventRinging]: this._handleRingingEvent,\n\n      /**\n       * Call Quality\n       */\n      [Constants.CallEventQualityWarningsChanged]:\n        this._handleQualityWarningsChangedEvent,\n\n      /**\n       * Call Message\n       */\n      [Constants.CallEventMessageReceived]: this._handleMessageReceivedEvent,\n    };\n\n    NativeEventEmitter.addListener(\n      Constants.ScopeCall,\n      this._handleNativeEvent\n    );\n  }\n\n  /**\n   * This intermediate native call event handler acts as a \"gate\", only\n   * executing the actual call event handler (such as `Connected`) if this call\n   * object matches the `Uuid` of the call that had an event raised.\n   * @param nativeCallEvent - A call event directly from the native layer.\n   */\n  private _handleNativeEvent = (nativeCallEvent: NativeCallEvent) => {\n    const { type, call: callInfo } = nativeCallEvent;\n\n    const handler = this._nativeEventHandler[type];\n    if (typeof handler === 'undefined') {\n      throw new Error(\n        `Unknown call event type received from the native layer: \"${type}\".`\n      );\n    }\n\n    if (callInfo.uuid === this._uuid) {\n      handler(nativeCallEvent);\n    }\n  };\n\n  /**\n   * Helper function to update the state of the call when a call event occurs\n   * that necessitates an update, i.e. upon a\n   * {@link (Call:namespace).Event.Connected | Connected event} we want to\n   * update the state of the call to also reflect the\n   * {@link (Call:namespace).State.Connected | Connected state}.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _update({\n    type,\n    call: { from, initialConnectedTimestamp, sid, to },\n  }: NativeCallEvent) {\n    const newState = eventTypeStateMap[type];\n    if (typeof newState === 'string') {\n      this._state = newState;\n    }\n    this._from = from;\n    this._initialConnectedTimestamp = initialConnectedTimestamp\n      ? new Date(initialConnectedTimestamp)\n      : undefined;\n    this._sid = sid;\n    this._to = to;\n  }\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Connected} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleConnectedEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventConnected) {\n      throw new Error(\n        'Incorrect \"call#connected\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    this.emit(Call.Event.Connected);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.ConnectFailure} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleConnectFailureEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventConnectFailure) {\n      throw new Error(\n        'Incorrect \"call#connectFailure\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    const { message, code } = nativeCallEvent.error;\n    const error = constructTwilioError(message, code);\n    this.emit(Call.Event.ConnectFailure, error);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Disconnected} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleDisconnectedEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventDisconnected) {\n      throw new Error(\n        'Incorrect \"call#disconnected\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    if (nativeCallEvent.error) {\n      const { message, code } = nativeCallEvent.error;\n      const error = constructTwilioError(message, code);\n      this.emit(Call.Event.Disconnected, error);\n    } else {\n      this.emit(Call.Event.Disconnected);\n    }\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Reconnecting} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleReconnectingEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventReconnecting) {\n      throw new Error(\n        'Incorrect \"call#reconnecting\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    const { message, code } = nativeCallEvent.error;\n    const error = constructTwilioError(message, code);\n    this.emit(Call.Event.Reconnecting, error);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Reconnected} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleReconnectedEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventReconnected) {\n      throw new Error(\n        'Incorrect \"call#reconnected\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    this.emit(Call.Event.Reconnected);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Ringing} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleRingingEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventRinging) {\n      throw new Error(\n        'Incorrect \"call#ringing\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    this.emit(Call.Event.Ringing);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.QualityWarningsChanged}\n   * event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleQualityWarningsChangedEvent = (\n    nativeCallEvent: NativeCallEvent\n  ) => {\n    if (nativeCallEvent.type !== Constants.CallEventQualityWarningsChanged) {\n      throw new Error(\n        'Incorrect \"call#qualityWarnings\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    const currentWarnings = nativeCallEvent[Constants.CallEventCurrentWarnings];\n    const previousWarnings =\n      nativeCallEvent[Constants.CallEventPreviousWarnings];\n\n    this.emit(\n      Call.Event.QualityWarningsChanged,\n      currentWarnings as Call.QualityWarning[],\n      previousWarnings as Call.QualityWarning[]\n    );\n  };\n\n  /**\n   * Handler for the {@link (Call:namespace).Event.MessageReceived} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleMessageReceivedEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventMessageReceived) {\n      throw new Error(\n        'Incorrect \"call#Received\" handler called for type' +\n          `\"${nativeCallEvent.type}`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    const { callMessage: callMessageInfo } = nativeCallEvent;\n\n    const incomingCallMessage = new IncomingCallMessage(callMessageInfo);\n\n    this.emit(Call.Event.MessageReceived, incomingCallMessage);\n  };\n\n  /**\n   * Disconnect this side of the call.\n   * @returns\n   *  A `Promise` that\n   *    - Resolves when the call has disconnected.\n   *    - Rejects if the native layer cannot disconnect the call.\n   */\n  disconnect(): Promise<void> {\n    return NativeModule.call_disconnect(this._uuid);\n  }\n\n  /**\n   * Get the mute status of this side of the call.\n   * @returns\n   *  - A boolean representing the muted status of the call.\n   *  - `undefined` if the call state has not yet been received from the native\n   *    layer.\n   */\n  isMuted(): boolean | undefined {\n    return this._isMuted;\n  }\n\n  /**\n   * Get the hold status of this side of the call.\n   * @returns\n   *  - A boolean representing the hold status of the call.\n   *  - `undefined` if the call state has not yet been received from the native\n   *    layer.\n   */\n  isOnHold(): boolean | undefined {\n    return this._isOnHold;\n  }\n\n  /**\n   * Return a `Record` of custom parameters given to this call.\n   * @returns\n   *   - A `Record` of custom parameters.\n   */\n  getCustomParameters(): CustomParameters {\n    return this._customParameters;\n  }\n\n  /**\n   * Get the value of the `from` parameter given to this call.\n   * @returns\n   *  - A `String` representing the `from` parameter.\n   *  - `undefined` if the call information has not yet been received from the\n   *    native layer.\n   */\n  getFrom(): string | undefined {\n    return this._from;\n  }\n\n  /**\n   * Get the timestamp (milliseconds since epoch) of the call connected event.\n   * @returns\n   *  - A `number` representing the timestamp.\n   *  - `undefined` if the call has not yet connected.\n   */\n  getInitialConnectedTimestamp(): Date | undefined {\n    return this._initialConnectedTimestamp;\n  }\n\n  /**\n   * Get the call `SID`.\n   * @returns\n   *  - A `String` representing the `SID` of the call.\n   *  - `undefined` if the call information has not yet been received from the\n   *    native layer.\n   */\n  getSid(): string | undefined {\n    return this._sid;\n  }\n\n  /**\n   * Get the state of the call object, such as {@link (Call:namespace).State.Connected} or\n   * {@link (Call:namespace).State.Disconnected}.\n   * @returns\n   *  - A {@link (Call:namespace).State}.\n   */\n  getState(): Call.State {\n    return this._state;\n  }\n\n  /**\n   * Gets the `PeerConnection` `WebRTC` stats for the ongoing call.\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with a {@link RTCStats.StatsReport} object representing the\n   *      `WebRTC` `PeerConnection` stats of a call.\n   *    - Rejects when a {@link RTCStats.StatsReport} cannot be generated for a\n   *      call.\n   */\n  getStats(): Promise<RTCStats.StatsReport> {\n    return NativeModule.call_getStats(this._uuid);\n  }\n\n  /**\n   * Get the value of the `to` parameter given to this call.\n   * @returns\n   *  - A `String` representing the `to` parameter.\n   *  - `undefined` if the call information has not yet been received from the\n   *    native layer.\n   */\n  getTo(): string | undefined {\n    return this._to;\n  }\n\n  /**\n   * Put this end of the call on hold or not on hold.\n   *\n   * @example\n   * To put a call on hold\n   * ```typescript\n   * call.hold(true);\n   * ```\n   * @example\n   * To take a call off hold\n   * ```typescript\n   * call.hold(false);\n   * ```\n   *\n   * @param hold - A `boolean` representing whether or not to put this end of\n   *  the call on hold.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the hold status when the call is put on hold or not on\n   *      hold.\n   *    - Rejects when the call is not able to be put on hold or not on hold.\n   */\n  async hold(hold: boolean): Promise<boolean> {\n    this._isOnHold = await NativeModule.call_hold(this._uuid, hold);\n    return this._isOnHold;\n  }\n\n  /**\n   * Mute or unmute this end of the call.\n   *\n   * @example\n   * To mute a call\n   * ```typescript\n   * call.mute(true);\n   * ```\n   *\n   * @example\n   * To unmute a call\n   * ```typescript\n   * call.mute(false);\n   * ```\n   *\n   * @param mute - A `boolean` representing whether or not to mute this end of\n   *  the call.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the muted status of the call when the call is muted or\n   *      unmuted.\n   *    - Rejects when the call is not able to be muted or unmuted.\n   */\n  async mute(mute: boolean): Promise<boolean> {\n    this._isMuted = await NativeModule.call_mute(this._uuid, mute);\n    return this._isMuted;\n  }\n\n  /**\n   * Send DTMF digits.\n   *\n   * @example\n   * To send the `0` dialtone:\n   * ```typescript\n   * call.sendDigits('0');\n   * ```\n   *\n   * @example\n   * To send the `0` and then `1` dialtone:\n   * ```typescript\n   * call.sendDigits('01');\n   * ```\n   *\n   * @param digits - A sequence of DTMF digits in a string.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves when the DTMF digits have been sent.\n   *    - Rejects when DTMF tones are not able to be sent.\n   */\n  sendDigits(digits: string): Promise<void> {\n    return NativeModule.call_sendDigits(this._uuid, digits);\n  }\n\n  /**\n   * Send a CallMessage.\n   *\n   * @example\n   * To send a user-defined-message\n   * ```typescript\n   * const outgoingCallMessage: OutgoingCallMessage = await call.sendMessage({\n   *   content: { key1: 'This is a messsage from the parent call' },\n   *   contentType: 'application/json',\n   *   messageType: 'user-defined-message'\n   * });\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Failure, (error) => {\n   *   // outgoingCallMessage failed, handle error\n   * });\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Sent, () => {\n   *   // outgoingCallMessage sent\n   * });\n   * ```\n   *\n   * @param message - The call message to send.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the OutgoingCallMessage object.\n   *    - Rejects when the message is unable to be sent.\n   */\n  async sendMessage(message: CallMessage): Promise<OutgoingCallMessage> {\n    const { content, contentType, messageType } = validateCallMessage(message);\n\n    const voiceEventSid = await NativeModule.call_sendMessage(\n      this._uuid,\n      content,\n      contentType,\n      messageType\n    );\n\n    const outgoingCallMessage = new OutgoingCallMessage({\n      content,\n      contentType,\n      messageType,\n      voiceEventSid,\n    });\n\n    return outgoingCallMessage;\n  }\n\n  /**\n   * Post feedback about a call.\n   *\n   * @example\n   * To report that a call had very significant audio latency:\n   * ```typescript\n   * call.postFeedback(Call.Score.Five, Call.Issue.AudioLatency);\n   * ```\n   *\n   * @param score - A score representing the serverity of the issue being\n   * reported.\n   * @param issue - The issue being reported.\n   * @returns\n   *  A `Promise` that\n   *    - Resolves when the feedback has been posted.\n   *    - Rejects when the feedback is unable to be sent.\n   */\n  async postFeedback(score: Call.Score, issue: Call.Issue): Promise<void> {\n    if (!validScores.includes(score)) {\n      throw new InvalidArgumentError(\n        '\"score\" parameter invalid. Must be a member of the `Call.Score` enum.'\n      );\n    }\n\n    if (!Object.values(Call.Issue).includes(issue)) {\n      throw new InvalidArgumentError(\n        '\"issue\" parameter invalid. Must be a member of the `Call.Issue` enum.'\n      );\n    }\n\n    const nativeScore = scoreMap[score];\n    const nativeIssue = issueMap[issue];\n\n    return NativeModule.call_postFeedback(this._uuid, nativeScore, nativeIssue);\n  }\n}\n\n/**\n * Namespace for enumerations and types used by\n * {@link (Call:class) | Call objects}.\n *\n * @remarks\n *  - See also the {@link (Call:class) | Call class}.\n *  - See also the {@link (Call:interface) | Call interface}.\n *\n * @public\n */\nexport namespace Call {\n  /**\n   * Enumeration of all event strings emitted by {@link (Call:class)} objects.\n   */\n  export enum Event {\n    /**\n     * Event string for the `Connected` event.\n     * See {@link (Call:interface).(addListener:1)}.\n     */\n    'Connected' = 'connected',\n\n    /**\n     * Event string for the `ConnectedFailure` event.\n     * See {@link (Call:interface).(addListener:2)}.\n     */\n    'ConnectFailure' = 'connectFailure',\n\n    /**\n     * Event string for the `Reconnecting` event.\n     * See {@link (Call:interface).(addListener:3)}.\n     */\n    'Reconnecting' = 'reconnecting',\n\n    /**\n     * Event string for the `Reconnected` event.\n     * See {@link (Call:interface).(addListener:4)}.\n     */\n    'Reconnected' = 'reconnected',\n\n    /**\n     * Event string for the `Disconnected` event.\n     * See {@link (Call:interface).(addListener:5)}.\n     */\n    'Disconnected' = 'disconnected',\n\n    /**\n     * Event string for the `Ringing` event.\n     * See {@link (Call:interface).(addListener:6)}.\n     */\n    'Ringing' = 'ringing',\n\n    /**\n     * Event string for the `QualityWarningsChanged` event.\n     * See {@link (Call:interface).(addListener:7)}.\n     */\n    'QualityWarningsChanged' = 'qualityWarningsChanged',\n\n    /**\n     * Event string for the `MessageReceived` event.\n     * See {@link (Call:interface).(addListener:8)}\n     */\n    'MessageReceived' = 'messageReceived',\n  }\n\n  /**\n   * An enumeration of all possible {@link (Call:class) | Call object} states.\n   */\n  export enum State {\n    /**\n     * Call `Connected` state.\n     *\n     * Occurs when the `Connected` and `Reconnected` event is raised.\n     *\n     * @remarks\n     *\n     * See {@link (Call:interface).(addListener:1)}.\n     *\n     * See {@link (Call:interface).(addListener:4)}.\n     */\n    'Connected' = Constants.CallStateConnected,\n\n    /**\n     * Call `Connecting` state.\n     *\n     * The default state of an outgoing call.\n     */\n    'Connecting' = Constants.CallStateConnecting,\n\n    /**\n     * Call `Disconnected` state.\n     *\n     * Occurs when the `Disconnected` or `ConnectFailure` event is raised.\n     *\n     * @remarks\n     *\n     * See {@link (Call:interface).(addListener:5)}.\n     *\n     * See {@link (Call:interface).(addListener:2)}.\n     */\n    'Disconnected' = Constants.CallStateDisconnected,\n\n    /**\n     * Call `Reconnecting` state.\n     *\n     * Occurs when the `Reconnecting` event is raised.\n     *\n     * @remarks\n     *\n     * See {@link (Call:interface).(addListener:3)}.\n     */\n    'Reconnecting' = Constants.CallStateReconnecting,\n\n    /**\n     * Call `Ringing` state. Occurs when the `Ringing` event is raised.\n     *\n     * @remarks\n     *\n     * See {@link (Call:interface).(addListener:6)}.\n     */\n    'Ringing' = Constants.CallStateRinging,\n  }\n\n  /**\n   * An enumeration of all call quality-warning types.\n   */\n  export enum QualityWarning {\n    /**\n     * Raised when the call detects constant audio input, such as silence.\n     */\n    'ConstantAudioInputLevel' = 'constant-audio-input-level',\n    /**\n     * Raised when the network encounters high jitter.\n     */\n    'HighJitter' = 'high-jitter',\n    /**\n     * Raised when the network encounters high packet loss.\n     */\n    'HighPacketLoss' = 'high-packet-loss',\n    /**\n     * Raised when the network encounters high packet round-trip-time.\n     */\n    'HighRtt' = 'high-rtt',\n    /**\n     * Raised when the call detects a low mean-opinion-score or MOS.\n     */\n    'LowMos' = 'low-mos',\n  }\n\n  /**\n   * An enumeration of all scores that could be used to rate the experience of\n   * a call or issues encountered during the call.\n   */\n  export enum Score {\n    /**\n     * An issue was not encountered or there is no desire to report said issue.\n     */\n    'NotReported' = 0,\n    /**\n     * An issue had severity approximately 1/5.\n     */\n    'One' = 1,\n    /**\n     * An issue had severity approximately 2/5.\n     */\n    'Two' = 2,\n    /**\n     * An issue had severity approximately 3/5.\n     */\n    'Three' = 3,\n    /**\n     * An issue had severity approximately 4/5.\n     */\n    'Four' = 4,\n    /**\n     * An issue had severity approximately 5/5.\n     */\n    'Five' = 5,\n  }\n\n  /**\n   * An enumeration of call issues that can be reported.\n   */\n  export enum Issue {\n    /**\n     * No issue is reported.\n     */\n    'NotReported' = 'not-reported',\n    /**\n     * The call was dropped unexpectedly.\n     */\n    'DroppedCall' = 'dropped-call',\n    /**\n     * The call encountered significant audio latency.\n     */\n    'AudioLatency' = 'audio-latency',\n    /**\n     * One party of the call could not hear the other callee.\n     */\n    'OneWayAudio' = 'one-way-audio',\n    /**\n     * Call audio was choppy.\n     */\n    'ChoppyAudio' = 'choppy-audio',\n    /**\n     * Call audio had significant noise.\n     */\n    'NoisyCall' = 'noisy-call',\n    /**\n     * Call audio had significant echo.\n     */\n    'Echo' = 'echo',\n  }\n\n  /**\n   * Listener types for all events emitted by a\n   * {@link (Call:class) | Call object.}\n   */\n  export namespace Listener {\n    /**\n     * Connected event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Connected}\n     * event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:1)}.\n     */\n    export type Connected = () => void;\n\n    /**\n     * Connect failure event listener. This should be the function signature of\n     * any event listener bound to the\n     * {@link (Call:namespace).Event.ConnectFailure} event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:2)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type ConnectFailure = (error: TwilioError) => void;\n\n    /**\n     * Reconnecting event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Reconnecting}\n     * event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:3)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type Reconnecting = (error: TwilioError) => void;\n\n    /**\n     * Reconnected event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Reconnected}\n     * event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:4)}.\n     */\n    export type Reconnected = () => void;\n\n    /**\n     * Disconnected event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Disconnected}\n     * event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:5)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type Disconnected = (error?: TwilioError) => void;\n\n    /**\n     * Ringing event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Ringing} event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:6)}.\n     */\n    export type Ringing = () => void;\n\n    /**\n     * Quality warnings changed event listener. This should be the function\n     * signature of any event listener bound to the\n     * {@link (Call:namespace).Event.QualityWarningsChanged} event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:7)}.\n     */\n    export type QualityWarningsChanged = (\n      currentQualityWarnings: Call.QualityWarning[],\n      previousQualityWarnings: Call.QualityWarning[]\n    ) => void;\n\n    /**\n     * CallMessage received event listener. This should be the function signature of\n     * any event listener bound to the {@link (Call:namespace).Event.MessageReceived} event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:8)}.\n     */\n    export type MessageReceived = (\n      incomingCallMessage: IncomingCallMessage\n    ) => void;\n\n    /**\n     * Generic event listener. This should be the function signature of any\n     * event listener bound to any call event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:9)}.\n     */\n    export type Generic = (...args: any[]) => void;\n  }\n}\n\n/**\n * Mapping of {@link (Call:namespace).Event | Call events} to\n * {@link (Call:namespace).State | Call states}.\n *\n * @remarks\n * Note that this mapping is not a 1:1 bijection. Not every event coming from\n * the native layer has a relevant state, and some events share a state.\n * Therefore, this `Record` needs to be marked as `Partial` and\n * undefined-checking logic is needed when using this mapping.\n *\n * @internal\n */\nconst eventTypeStateMap: Partial<Record<NativeCallEventType, Call.State>> = {\n  [Constants.CallEventConnected]: Call.State.Connected,\n  [Constants.CallEventConnectFailure]: Call.State.Disconnected,\n  [Constants.CallEventDisconnected]: Call.State.Disconnected,\n  [Constants.CallEventReconnecting]: Call.State.Reconnecting,\n  [Constants.CallEventReconnected]: Call.State.Connected,\n  [Constants.CallEventRinging]: Call.State.Ringing,\n};\n\n/**\n * Array of valid call scores.\n *\n * @internal\n */\nconst validScores = [\n  Call.Score.NotReported,\n  Call.Score.One,\n  Call.Score.Two,\n  Call.Score.Three,\n  Call.Score.Four,\n  Call.Score.Five,\n];\n\n/**\n * Mapping of the {@link (Call:namespace).Score | Call score} enum to\n * cross-platform common constants.\n *\n * @internal\n */\nconst scoreMap: Record<Call.Score, NativeCallFeedbackScore> = {\n  [Call.Score.NotReported]: Constants.CallFeedbackScoreNotReported,\n  [Call.Score.One]: Constants.CallFeedbackScoreOne,\n  [Call.Score.Two]: Constants.CallFeedbackScoreTwo,\n  [Call.Score.Three]: Constants.CallFeedbackScoreThree,\n  [Call.Score.Four]: Constants.CallFeedbackScoreFour,\n  [Call.Score.Five]: Constants.CallFeedbackScoreFive,\n};\n\n/**\n * Mapping of the {@link (Call:namespace).Issue | Call issue} enum to\n * cross-platform common constants.\n *\n * @internal\n */\nconst issueMap: Record<Call.Issue, NativeCallFeedbackIssue> = {\n  [Call.Issue.AudioLatency]: Constants.CallFeedbackIssueAudioLatency,\n  [Call.Issue.ChoppyAudio]: Constants.CallFeedbackIssueChoppyAudio,\n  [Call.Issue.DroppedCall]: Constants.CallFeedbackIssueDroppedCall,\n  [Call.Issue.Echo]: Constants.CallFeedbackIssueEcho,\n  [Call.Issue.NoisyCall]: Constants.CallFeedbackIssueNoisyCall,\n  [Call.Issue.NotReported]: Constants.CallFeedbackIssueNotReported,\n  [Call.Issue.OneWayAudio]: Constants.CallFeedbackIssueOneWayAudio,\n};\n"]}