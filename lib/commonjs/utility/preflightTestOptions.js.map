{"version":3,"sources":["preflightTestOptions.ts"],"names":["validateIceTransportPolicy","iceTransportPolicy","Object","values","IceTransportPolicy","includes","status","error","InvalidArgumentError","validateIceServer","iceServer","hasUsername","hasPassword","hasServerUrl","username","password","serverUrl","validateIceServers","iceServers","Array","isArray","validation","validateAudioCodec","audioCodec","type","AudioCodecType","maxAverageBitrate","validateAudioCodecs","audioCodecs","validatePreflightOptions","preflightTestOptions","preferredAudioCodecs"],"mappings":"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","sourcesContent":["import { InvalidArgumentError } from '../error/InvalidArgumentError';\nimport type { PreflightTest } from '../PreflightTest';\nimport { AudioCodec, AudioCodecType } from '../type/AudioCodec';\nimport { IceTransportPolicy, IceServer } from '../type/Ice';\n\nexport type InvalidOptions = {\n  status: 'error';\n  error: InvalidArgumentError;\n};\n\nexport type ValidOptions<T> = { status: 'ok' } & T;\n\nexport type OptionValidation<T> = InvalidOptions | ValidOptions<T>;\n\nfunction validateIceTransportPolicy(\n  iceTransportPolicy: IceTransportPolicy\n): OptionValidation<{ iceTransportPolicy: IceTransportPolicy }> {\n  if (\n    typeof iceTransportPolicy !== 'string' ||\n    !Object.values(IceTransportPolicy).includes(iceTransportPolicy)\n  ) {\n    return {\n      status: 'error',\n      error: new InvalidArgumentError(\n        'If \"iceTransportPolicy\" is present, it must be a string of value ' +\n          '\"relay\" or \"all\".'\n      ),\n    };\n  }\n\n  return { status: 'ok', iceTransportPolicy };\n}\n\nfunction validateIceServer(\n  iceServer: IceServer\n): OptionValidation<{ iceServer: IceServer }> {\n  if (typeof iceServer !== 'object' || iceServer === null) {\n    return {\n      status: 'error',\n      error: new InvalidArgumentError('\"iceServer\" must be a non-null object.'),\n    };\n  }\n\n  const hasUsername = 'username' in iceServer;\n  const hasPassword = 'password' in iceServer;\n  const hasServerUrl = 'serverUrl' in iceServer;\n\n  if (hasUsername) {\n    const { username } = iceServer;\n    if (typeof username !== 'string') {\n      return {\n        status: 'error',\n        error: new InvalidArgumentError(\n          'If \"username\" is present in \"iceServer\", it must be a string.'\n        ),\n      };\n    }\n  }\n\n  if (hasPassword) {\n    const { password } = iceServer;\n    if (typeof password !== 'string') {\n      return {\n        status: 'error',\n        error: new InvalidArgumentError(\n          'If \"password\" is present in \"iceServer\", it must be a string.'\n        ),\n      };\n    }\n  }\n\n  if (hasServerUrl) {\n    const { serverUrl } = iceServer;\n    if (typeof serverUrl !== 'string') {\n      return {\n        status: 'error',\n        error: new InvalidArgumentError(\n          'If \"serverUrl\" is present in \"iceServer\", it must be a string.'\n        ),\n      };\n    }\n  }\n\n  if (hasUsername && hasPassword && hasServerUrl) {\n    return {\n      status: 'ok',\n      iceServer,\n    };\n  }\n\n  if (!hasUsername && !hasPassword && hasServerUrl) {\n    return {\n      status: 'ok',\n      iceServer,\n    };\n  }\n\n  return {\n    status: 'error',\n    error: new InvalidArgumentError(\n      'Ice server must have type: { serverUrl: string } | { username: ' +\n        'string; password: string; serverUrl: string }'\n    ),\n  };\n}\n\nfunction validateIceServers(\n  iceServers: IceServer[]\n): OptionValidation<{ iceServers: IceServer[] }> {\n  if (!Array.isArray(iceServers)) {\n    return {\n      status: 'error',\n      error: new InvalidArgumentError(\n        'If \"iceServers\" are present, it must be an array of valid IceServer ' +\n          'objects.'\n      ),\n    };\n  }\n\n  for (const iceServer of iceServers) {\n    const validation = validateIceServer(iceServer);\n    if (validation.status === 'error') {\n      return validation;\n    }\n  }\n\n  return {\n    status: 'ok',\n    iceServers,\n  };\n}\n\nfunction validateAudioCodec(\n  audioCodec: AudioCodec\n): OptionValidation<{ audioCodec: AudioCodec }> {\n  if (typeof audioCodec !== 'object') {\n    return {\n      status: 'error',\n      error: new InvalidArgumentError(\n        'If \"audioCodec\" is present, it must be an object.'\n      ),\n    };\n  }\n\n  if ('type' in audioCodec) {\n    const { type } = audioCodec;\n    if (\n      typeof type !== 'string' ||\n      !Object.values(AudioCodecType).includes(type)\n    ) {\n      return {\n        status: 'error',\n        error: new InvalidArgumentError(\n          'The type of \"audioCodec.type\" must be a string valued one of ' +\n            '[\"opus\", \"pcmu\"].'\n        ),\n      };\n    }\n  }\n\n  if ('maxAverageBitrate' in audioCodec) {\n    const { maxAverageBitrate } = audioCodec;\n    if (typeof maxAverageBitrate !== 'number') {\n      return {\n        status: 'error',\n        error: new InvalidArgumentError(\n          'The type of \"audioCodec.maxAverageBitrate\" must be a number.'\n        ),\n      };\n    }\n  }\n\n  return {\n    status: 'ok',\n    audioCodec,\n  };\n}\n\nfunction validateAudioCodecs(\n  audioCodecs: AudioCodec[]\n): OptionValidation<{ audioCodecs: AudioCodec[] }> {\n  if (!Array.isArray(audioCodecs)) {\n    return {\n      status: 'error',\n      error: new InvalidArgumentError(\n        'If \"preferredAudioCodecs\" is present, it must be an array of valid ' +\n          '\"audioCodec\" objects.'\n      ),\n    };\n  }\n\n  for (const audioCodec of audioCodecs) {\n    const validation = validateAudioCodec(audioCodec);\n    if (validation.status === 'error') {\n      return validation;\n    }\n  }\n\n  return {\n    status: 'ok',\n    audioCodecs,\n  };\n}\n\nexport function validatePreflightOptions(\n  preflightTestOptions: PreflightTest.Options\n): OptionValidation<{ preflightTestOptions: PreflightTest.Options }> {\n  if ('iceTransportPolicy' in preflightTestOptions) {\n    const validation = validateIceTransportPolicy(\n      preflightTestOptions.iceTransportPolicy!\n    );\n    if (validation.status === 'error') {\n      return validation;\n    }\n  }\n\n  if ('iceServers' in preflightTestOptions) {\n    const validation = validateIceServers(preflightTestOptions.iceServers!);\n    if (validation.status === 'error') {\n      return validation;\n    }\n  }\n\n  if ('preferredAudioCodecs' in preflightTestOptions) {\n    const validation = validateAudioCodecs(\n      preflightTestOptions.preferredAudioCodecs!\n    );\n    if (validation.status === 'error') {\n      return validation;\n    }\n  }\n\n  return {\n    status: 'ok',\n    preflightTestOptions,\n  };\n}\n"]}